'\" t
.\"     Title: lua_load
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 2014/10/22
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "LUA_LOAD" "3lua" "2014/10/22" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
lua_load \- lua_load
.SH "SYNOPSIS"
.sp
[\-0, +1, \(en]
.sp
.nf
 int lua_load (lua_State *L,
               lua_Reader reader,
               void *data,
               const char *source,
               const char *mode);
.fi
.sp
Loads a Lua chunk without running it\&. If there are no errors, \fBlua_load\fR pushes the compiled chunk as a Lua function on top of the stack\&. Otherwise, it pushes an error message\&.
.sp
The return values of \fBlua_load\fR are:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBLUA_OK\fR: no errors;
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBLUA_ERRSYNTAX\fR: syntax error during precompilation;
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBLUA_ERRMEM\fR: memory allocation error;
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBLUA_ERRGCMM\fR: error while running a
\fB__gc\fR
metamethod\&. (This error has no relation with the chunk being loaded\&. It is generated by the garbage collector\&.)
.RE
.sp
The \fBlua_load\fR function uses a user\-supplied \fBreader\fR function to read the chunk (see \fBlua_Reader\fR)\&. The \fBdata\fR argument is an opaque value passed to the reader function\&.
.sp
The \fBsource\fR argument gives a name to the chunk, which is used for error messages and in debug information (see \(sc4\&.9)\&.
.sp
\fBlua_load\fR automatically detects whether the chunk is text or binary and loads it accordingly (see program \fBluac\fR)\&. The string \fBmode\fR works as in function \fBload\fR, with the addition that a \fBNULL\fR value is equivalent to the string "\fBbt\fR"\&.
.sp
\fBlua_load\fR uses the stack internally, so the reader function must always leave the stack unmodified when returning\&.
.sp
If the resulting function has one upvalue, this upvalue is set to the value of the global environment stored at index \fBLUA_RIDX_GLOBALS\fR in the registry (see \(sc4\&.5)\&. When loading main chunks, this upvalue will be the \fB_ENV\fR variable (see \(sc2\&.2)\&.
