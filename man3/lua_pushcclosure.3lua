'\" t
.\"     Title: lua_pushcclosure
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "LUA_PUSHCCLOSURE" "3lua" "10/25/2014" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
lua_pushcclosure \- lua_pushcclosure
.SH "SYNOPSIS"
.sp
[\-n, +1, e]
.sp
.nf
 void lua_pushcclosure (lua_State *L, lua_CFunction fn, int n);
.fi
.sp
Pushes a new C closure onto the stack\&.
.sp
When a C function is created, it is possible to associate some values with it, thus creating a C closure (see \(sc4\&.4); these values are then accessible to the function whenever it is called\&. To associate values with a C function, first these values must be pushed onto the stack (when there are multiple values, the first value is pushed first)\&. Then \fBlua_pushcclosure\fR is called to create and push the C function onto the stack, with the argument \fBn\fR telling how many values will be associated with the function\&. \fBlua_pushcclosure\fR also pops these values from the stack\&.
.sp
The maximum value for \fBn\fR is 255\&.
.sp
When \fBn\fR is zero, this function creates a light C function, which is just a pointer to the C function\&. In that case, it never raises a memory error\&.
