'\" t
.\"     Title: file:read
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 2014/10/22
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "FILE:READ" "3lua" "2014/10/22" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
file:read \- file:read (\(md\(md\(md)
.SH "SYNOPSIS"
.sp
\fBfile:read (\(md\(md\(md)\fR
.sp
Reads the file \fBfile\fR, according to the given formats, which specify what to read\&. For each format, the function returns a string or a number with the characters read, or nil if it cannot read data with the specified format\&. (In this latter case, the function does not read subsequent formats\&.) When called without formats, it uses a default format that reads the next line (see below)\&.
.sp
The available formats are
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
"\fBn\fR": reads a numeral and returns it as a float or an integer, following the lexical conventions of Lua\&. (The numeral may have leading spaces and a sign\&.) This format always reads the longest input sequence that is a valid prefix for a number; if that prefix does not form a valid number (e\&.g\&., an empty string, "\fB0x\fR", or "\fB3\&.4e\-\fR"), it is discarded and the function returns nil\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
"\fBi\fR": reads an integral number and returns it as an integer\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
"\fBa\fR": reads the whole file, starting at the current position\&. On end of file, it returns the empty string\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
"\fBl\fR": reads the next line skipping the end of line, returning nil on end of file\&. This is the default format\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
"\fBL\fR": reads the next line keeping the end\-of\-line character (if present), returning nil on end of file\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
number: reads a string with up to this number of bytes, returning nil on end of file\&. If
\fBnumber\fR
is zero, it reads nothing and returns an empty string, or nil on end of file\&.
.RE
.sp
The formats "\fBl\fR" and "\fBL\fR" should be used only for text files\&.
