'\" t
.\"     Title: lua_close
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 2015/01/06
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "LUA_CLOSE" "3lua" "2015/01/06" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
lua_close \- lua_close
.SH "SYNOPSIS"
.sp
[\-0, +0, \-]
.sp
.nf
 void lua_close (lua_State *L);
.fi
.sp
Destroys all objects in the given Lua state (calling the corresponding garbage\-collection metamethods, if any) and frees all dynamic memory used by this state\&. On several platforms, you may not need to call this function, because all resources are naturally released when the host program ends\&. On the other hand, long\-running programs that create multiple states, such as daemons or web servers, will probably need to close states as soon as they are not needed\&.
