'\" t
.\"     Title: lua_resume
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 2015/01/06
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "LUA_RESUME" "3lua" "2015/01/06" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
lua_resume \- lua_resume
.SH "SYNOPSIS"
.sp
[\-?, +?, \-]
.sp
.nf
 int lua_resume (lua_State *L, lua_State *from, int nargs);
.fi
.sp
Starts and resumes a coroutine in a given thread\&.
.sp
To start a coroutine, you push onto the thread stack the main function plus any arguments; then you call \fBlua_resume\fR, with \fBnargs\fR being the number of arguments\&. This call returns when the coroutine suspends or finishes its execution\&. When it returns, the stack contains all values passed to \fBlua_yield\fR, or all values returned by the body function\&. \fBlua_resume\fR returns \fBLUA_YIELD\fR if the coroutine yields, \fBLUA_OK\fR if the coroutine finishes its execution without errors, or an error code in case of errors (see \fBlua_pcall\fR)\&.
.sp
In case of errors, the stack is not unwound, so you can use the debug API over it\&. The error message is on the top of the stack\&.
.sp
To resume a coroutine, you remove any results from the last \fBlua_yield\fR, put on its stack only the values to be passed as results from \fByield\fR, and then call \fBlua_resume\fR\&.
.sp
The parameter \fBfrom\fR represents the coroutine that is resuming \fBL\fR\&. If there is no such coroutine, this parameter can be \fBNULL\fR\&.
