'\" t
.\"     Title: lua_tolstring
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "LUA_TOLSTRING" "3lua" "10/25/2014" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
lua_tolstring \- lua_tolstring
.SH "SYNOPSIS"
.sp
[\-0, +0, e]
.sp
.nf
 const char *lua_tolstring (lua_State *L, int index, size_t *len);
.fi
.sp
Converts the Lua value at the given index to a C string\&. If \fBlen\fR is not \fBNULL\fR, it also sets \fB*len\fR with the string length\&. The Lua value must be a string or a number; otherwise, the function returns \fBNULL\fR\&. If the value is a number, then \fBlua_tolstring\fR also changes the actual value in the stack to a string\&. (This change confuses \fBlua_next\fR when \fBlua_tolstring\fR is applied to keys during a table traversal\&.)
.sp
\fBlua_tolstring\fR returns a fully aligned pointer to a string inside the Lua state\&. This string always has a zero (\fI\fB\e0\fR\fR) after its last character (as in C), but can contain other zeros in its body\&.
.sp
Because Lua has garbage collection, there is no guarantee that the pointer returned by \fBlua_tolstring\fR will be valid after the corresponding Lua value is removed from the stack\&.
