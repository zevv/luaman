'\" t
.\"     Title: lua_dump
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "LUA_DUMP" "3lua" "10/25/2014" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
lua_dump \- lua_dump
.SH "SYNOPSIS"
.sp
[\-0, +0, e]
.sp
.nf
 int lua_dump (lua_State *L,
                         lua_Writer writer,
                         void *data,
                         int strip);
.fi
.sp
Dumps a function as a binary chunk\&. Receives a Lua function on the top of the stack and produces a binary chunk that, if loaded again, results in a function equivalent to the one dumped\&. As it produces parts of the chunk, \fBlua_dump\fR calls function \fBwriter\fR (see \fBlua_Writer\fR) with the given \fBdata\fR to write them\&.
.sp
If \fBstrip\fR is true, the binary representation is created without debug information about the function\&.
.sp
The value returned is the error code returned by the last call to the writer; 0 means no errors\&.
.sp
This function does not pop the Lua function from the stack\&.
