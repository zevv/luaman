'\" t
.\"     Title: lua_pcall
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 2015/01/06
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "LUA_PCALL" "3lua" "2015/01/06" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
lua_pcall \- lua_pcall
.SH "SYNOPSIS"
.sp
[\-(nargs + 1), +(nresults|1), \-]
.sp
.nf
 int lua_pcall (lua_State *L, int nargs, int nresults, int msgh);
.fi
.sp
Calls a function in protected mode\&.
.sp
Both \fBnargs\fR and \fBnresults\fR have the same meaning as in \fBlua_call\fR\&. If there are no errors during the call, \fBlua_pcall\fR behaves exactly like \fBlua_call\fR\&. However, if there is any error, \fBlua_pcall\fR catches it, pushes a single value on the stack (the error message), and returns an error code\&. Like \fBlua_call\fR, \fBlua_pcall\fR always removes the function and its arguments from the stack\&.
.sp
If \fBmsgh\fR is 0, then the error message returned on the stack is exactly the original error message\&. Otherwise, \fBmsgh\fR is the stack index of a message handler\&. (In the current implementation, this index cannot be a pseudo\-index\&.) In case of runtime errors, this function will be called with the error message and its return value will be the message returned on the stack by \fBlua_pcall\fR\&.
.sp
Typically, the message handler is used to add more debug information to the error message, such as a stack traceback\&. Such information cannot be gathered after the return of \fBlua_pcall\fR, since by then the stack has unwound\&.
.sp
The \fBlua_pcall\fR function returns one of the following constants (defined in \fBlua\&.h\fR):
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBLUA_OK\fR
(0): success\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBLUA_ERRRUN\fR: a runtime error\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBLUA_ERRMEM\fR: memory allocation error\&. For such errors, Lua does not call the message handler\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBLUA_ERRERR\fR: error while running the message handler\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBLUA_ERRGCMM\fR: error while running a
\fB__gc\fR
metamethod\&. (This error typically has no relation with the function being called\&.)
.RE
